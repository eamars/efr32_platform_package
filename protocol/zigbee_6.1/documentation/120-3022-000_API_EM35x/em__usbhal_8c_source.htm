<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 6.1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div><!-- Generated by Doxygen 1.8.11 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('em__usbhal_8c_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">em_usbhal.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="em__usbhal_8c.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**************************************************************************/</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include PLATFORM_HEADER</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ember_8h.htm">stack/include/ember.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hal_8h.htm">hal/hal.h</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#if defined(CORTEXM3_EM35X_USB)</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usb_8h.htm">em_usb.h</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbtypes_8h.htm">em_usbtypes.h</a>&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbhal_8h.htm">em_usbhal.h</a>&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keywordtype">bool</span> usbVbusPresent;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">extern</span> USBD_Device_TypeDef *dev;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<a class="code" href="group__iar.htm#ga54cb903718e9e698f95e6a19c98db412">ALIGNMENT</a>(8)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;EndPointUnion usbBufferA = { 0, };</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;uint8_t *EPOUTBUF[7] = { usbBufferA.eps.ep0OUT,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                         usbBufferA.eps.ep1OUT,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                         usbBufferA.eps.ep2OUT,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                         usbBufferA.eps.ep3OUT,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                         usbBufferA.eps.ep4OUT,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                         usbBufferA.eps.ep5OUT,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                         usbBufferA.eps.ep6OUT };</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;uint8_t *EPINBUF[7]  = { usbBufferA.eps.ep0IN,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                         usbBufferA.eps.ep1IN,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                         usbBufferA.eps.ep2IN,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                         usbBufferA.eps.ep3IN,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                         usbBufferA.eps.ep4IN,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                         usbBufferA.eps.ep5IN,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                         usbBufferA.eps.ep6IN };</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keywordtype">void</span> USBDHAL_Connect(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">  #if USB_SELFPWRD_STATE == 1 &amp;&amp; defined(VBUSMON)</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">//For self-powered devices, The USB specification requires that the pull-up</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">//resistor is disconnected if VBUS is not connected.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  vbusMonCfg();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordflow">if</span> (usbVbusPresent) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">//Set ENUMCTRL ouput-high to enumerate.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9">ENUMCTRL_SETCFG</a>(_GPIO_P_CFGL_Px0_OUT);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb">ENUMCTRL_SET</a>();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">  #else // USB_SELFPWRD_STATE==1 &amp;&amp; defined(VBUSMON)</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="comment">//Set ENUMCTRL ouput-high to enumerate.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9">ENUMCTRL_SETCFG</a>(_GPIO_P_CFGL_Px0_OUT);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <a class="code" href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb">ENUMCTRL_SET</a>();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">  #endif // USB_SELFPWRD_STATE==1 &amp;&amp; defined(VBUSMON)</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">void</span> USBDHAL_Disconnect(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <a class="code" href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9">ENUMCTRL_SETCFG</a>(_GPIO_P_CFGL_Px0_IN);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <a class="code" href="group__board.htm#gaf9998c8b423b704f44d640f0c0f95c33">ENUMCTRL_CLR</a>();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a> USBDHAL_CoreInit(uint32_t totalRxFifoSize,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                    uint32_t totalTxFifoSize)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="comment">//Configure PA0 and PA1 in analog mode for USB</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  GPIO-&gt;P[0].CFGL = ((GPIO-&gt;P[0].CFGL &amp; (~_GPIO_P_CFGL_Px0_MASK))</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                     &amp; GPIO_P_CFGL_Px0_ANALOG);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  GPIO-&gt;P[0].CFGL = ((GPIO-&gt;P[0].CFGL &amp; (~_GPIO_P_CFGL_Px1_MASK))</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                     &amp; GPIO_P_CFGL_Px1_ANALOG);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  USB-&gt;BUFBASEA = (uint32_t)usbBufferA.allEps;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <a class="code" href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a>(usbBufferA.allEps, 0, USB_BUFFER_SIZE);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">// Double buffering currently not supported</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="comment">// #ifdef USB_DOUBLE_BUFFER</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="comment">//   USB-&gt;BUFBASEB = (uint32_t)usbBufferB.allEps;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="comment">//   MEMSET(usbBufferB.allEps, 0, USB_BUFFER_SIZE);</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="comment">//   //Refer to &quot;handle buffer B&quot; in the driveEp3Tx() function above</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="comment">//   //to learn why double buffering is not enabled by default.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="comment">//</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="comment">//   //Enable double buffering bulk EP3.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="comment">//   USB-&gt;CTRL |= (USB_CTRL_ENBUFOUTEP3B | USB_CTRL_ENBUFINEP3B);</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="comment">// #endif // USB_DOUBLE_BUFFER</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="comment">//Use the SELFPWDRD and REMOTEWKUPEN state defines to set the appropriate</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="comment">//bits in USB-&gt;CTRL</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  USB-&gt;CTRL = (USB-&gt;CTRL &amp; (~(USB_CTRL_SELFPWRD | USB_CTRL_REMOTEWKUPEN)))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;              | ((<a class="code" href="group__board.htm#gae6b917c9d9f01ff7389e45454482a57c">USB_SELFPWRD_STATE</a> &lt;&lt; _USB_CTRL_SELFPWRD_SHIFT)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                 | (<a class="code" href="group__board.htm#ga647bc93bcc6d8107a4aaccd0da9aa59f">USB_REMOTEWKUPEN_STATE</a> &lt;&lt; _USB_CTRL_REMOTEWKUPEN_SHIFT));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#ifdef  EMBER_EMU_TEST</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="comment">//Select which GPIO output is used for connect/disconnect. Any</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="comment">//value &gt; 47, selects disconnected state.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  EMU_USB_DISCONNECT = PORTA_PIN(2);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#endif //EMBER_EMU_TEST</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordtype">void</span> USBDHAL_AbortAllTransfers(<a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a> reason)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">int</span> i;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  USBD_Ep_TypeDef *ep;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a> callback;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keywordflow">if</span> ( reason != <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a405b76e741623252f954e353aceaf11b">USB_STATUS_DEVICE_RESET</a> ) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// unsupported</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// USBDHAL_AbortAllEps();</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">for</span> ( i = 1; i &lt;= NUM_EP_USED; i++ ) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    ep = &amp;(dev-&gt;ep[i]);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">if</span> ( ep-&gt;state != D_EP_IDLE ) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      ep-&gt;state = D_EP_IDLE;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      <span class="keywordflow">if</span> ( ep-&gt;xferCompleteCb != 0U ) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        callback = ep-&gt;xferCompleteCb;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        ep-&gt;xferCompleteCb = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">if</span> ((dev-&gt;lastState == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            &amp;&amp; (dev-&gt;state     == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a>)) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;          USBDHAL_DeactivateEp(ep);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        callback(reason, ep-&gt;xferred, ep-&gt;remaining);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#ifdef VBUSMON</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">//Use a selectable IRQ for monitoring VBUS on VBUSMON.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keywordtype">void</span> vbusMonCfg(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="comment">//VBUSMON just needs to be a simple input.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <a class="code" href="group__board.htm#ga67d14a8254f229f60e005c595bdde793">VBUSMON_SETCFG</a>();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="comment">//start from a fresh state, just in case</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <a class="code" href="group__board.htm#ga1bbac8109cb2271d2910e6a99195aa28">VBUSMON_INTCFG</a> = _EVENT_GPIO_CFGD_RESETVALUE;              <span class="comment">//disable triggering</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  NVIC-&gt;ICER[0] = <a class="code" href="group__board.htm#ga082f47ed895858746a735168bb0622da">VBUSMON_INT_EN_BIT</a>; <span class="comment">//clear top level int enable</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  EVENT_GPIO-&gt;FLAG = <a class="code" href="group__board.htm#ga71f8c638fe97ef20aa58cec345d1dc09">VBUSMON_FLAG_BIT</a>; <span class="comment">//clear stale interrupt</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  EVENT_MISS-&gt;MISS = <a class="code" href="group__board.htm#ga4767b26249ab17587e23a87bb0afe6b4">VBUSMON_MISS_BIT</a>;     <span class="comment">//clear stale missed interrupt</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="comment">//configure</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <a class="code" href="group__board.htm#ga56afc19439641d9c87f395b9fc113e7c">VBUSMON_SEL</a>();             <span class="comment">//point IRQ at the desired pin</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <a class="code" href="group__board.htm#ga1bbac8109cb2271d2910e6a99195aa28">VBUSMON_INTCFG</a>  = ((0 &lt;&lt; _EVENT_GPIO_CFGD_FILT_SHIFT)   <span class="comment">//no filter</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                     | (3 &lt;&lt; _EVENT_GPIO_CFGD_MOD_SHIFT)); <span class="comment">//3 = both edges</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  usbVbusPresent = ((<a class="code" href="group__board.htm#ga6b74ebf7985914d2185d28b50539bcb6">VBUSMON_IN</a> &amp; <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a">VBUSMON</a>) == <a class="code" href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a">VBUSMON</a>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  NVIC-&gt;ISER[0] = <a class="code" href="group__board.htm#ga082f47ed895858746a735168bb0622da">VBUSMON_INT_EN_BIT</a>; <span class="comment">//set top level interrupt enable</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif //VBUSMON</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifndef EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;uint32_t savedPeripheralReg;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">void</span> halSuspendCallback(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <a class="code" href="group__micro.htm#ga20bc9158aea3cd3f8ecae04f6c71205b">halSuspend</a>();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  savedPeripheralReg = CMLV-&gt;PERIPHERALDISABLE;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  CMLV-&gt;PERIPHERALDISABLE |= (CMLV_PERIPHERALDISABLE_ADC    \</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                              | CMLV_PERIPHERALDISABLE_TIM2 \</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                              | CMLV_PERIPHERALDISABLE_TIM1 \</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                              | CMLV_PERIPHERALDISABLE_SC1  \</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                              | CMLV_PERIPHERALDISABLE_SC2);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordtype">void</span> halResumeCallback(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  CMLV-&gt;PERIPHERALDISABLE = savedPeripheralReg;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <a class="code" href="group__micro.htm#ga3828884cc072db5a38d32e46303bd9a9">halResume</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#endif // EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#endif //CORTEXM3_EM35X_USB</span></div><div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00324">em_usb.h:324</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga2fa15407a4ef650bbd9f69dbddad6977"><div class="ttname"><a href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a></div><div class="ttdeci">int(* USB_XferCompleteCb_TypeDef)(USB_Status_TypeDef status, uint32_t xferred, uint32_t remaining)</div><div class="ttdoc">USB transfer callback function. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00526">em_usb.h:526</a></div></div>
<div class="ttc" id="group__micro_htm_ga20bc9158aea3cd3f8ecae04f6c71205b"><div class="ttname"><a href="group__micro.htm#ga20bc9158aea3cd3f8ecae04f6c71205b">halSuspend</a></div><div class="ttdeci">void halSuspend(void)</div><div class="ttdoc">Suspends microcontroller peripherals and board peripherals. </div></div>
<div class="ttc" id="group__board_htm_ga71f8c638fe97ef20aa58cec345d1dc09"><div class="ttname"><a href="group__board.htm#ga71f8c638fe97ef20aa58cec345d1dc09">VBUSMON_FLAG_BIT</a></div><div class="ttdeci">#define VBUSMON_FLAG_BIT</div><div class="ttdoc">The interrupt flag bit for VBUSMON. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00410">dev0680.h:410</a></div></div>
<div class="ttc" id="group__board_htm_ga1bbac8109cb2271d2910e6a99195aa28"><div class="ttname"><a href="group__board.htm#ga1bbac8109cb2271d2910e6a99195aa28">VBUSMON_INTCFG</a></div><div class="ttdeci">#define VBUSMON_INTCFG</div><div class="ttdoc">The interrupt configuration register for VBUSMON. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00397">dev0680.h:397</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00357">em_usb.h:357</a></div></div>
<div class="ttc" id="hal_8h_htm"><div class="ttname"><a href="hal_8h.htm">hal.h</a></div><div class="ttdoc">Generic set of HAL includes for all platforms. </div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a405b76e741623252f954e353aceaf11b"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a405b76e741623252f954e353aceaf11b">USB_STATUS_DEVICE_RESET</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00335">em_usb.h:335</a></div></div>
<div class="ttc" id="group__board_htm_ga4767b26249ab17587e23a87bb0afe6b4"><div class="ttname"><a href="group__board.htm#ga4767b26249ab17587e23a87bb0afe6b4">VBUSMON_MISS_BIT</a></div><div class="ttdeci">#define VBUSMON_MISS_BIT</div><div class="ttdoc">The missed interrupt bit for VBUSMON. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00415">dev0680.h:415</a></div></div>
<div class="ttc" id="ember_8h_htm"><div class="ttname"><a href="ember_8h.htm">ember.h</a></div><div class="ttdoc">The master include file for the EmberZNet API. </div></div>
<div class="ttc" id="em__usb_8h_htm"><div class="ttname"><a href="em__usb_8h.htm">em_usb.h</a></div><div class="ttdoc">USB protocol stack library API for EFM32. </div></div>
<div class="ttc" id="group__board_htm_ga995777714022e4e65da22d7ec78ac8e9"><div class="ttname"><a href="group__board.htm#ga995777714022e4e65da22d7ec78ac8e9">ENUMCTRL_SETCFG</a></div><div class="ttdeci">#define ENUMCTRL_SETCFG(cfg)</div><div class="ttdoc">Set the GPIO&amp;#39;s configuration to the provided state. The two states used are GPIOCFG_OUT when the devi...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00320">dev0680.h:320</a></div></div>
<div class="ttc" id="em__usbhal_8h_htm"><div class="ttname"><a href="em__usbhal_8h.htm">em_usbhal.h</a></div><div class="ttdoc">USB protocol stack library, low level USB peripheral access. </div></div>
<div class="ttc" id="group__board_htm_ga1e5b046d6e18fbf28c8fc14725348cbb"><div class="ttname"><a href="group__board.htm#ga1e5b046d6e18fbf28c8fc14725348cbb">ENUMCTRL_SET</a></div><div class="ttdeci">#define ENUMCTRL_SET()</div><div class="ttdoc">When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to set the ou...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00329">dev0680.h:329</a></div></div>
<div class="ttc" id="group__board_htm_gae6b917c9d9f01ff7389e45454482a57c"><div class="ttname"><a href="group__board.htm#gae6b917c9d9f01ff7389e45454482a57c">USB_SELFPWRD_STATE</a></div><div class="ttdeci">#define USB_SELFPWRD_STATE</div><div class="ttdoc">The USB power state. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00250">dev0680.h:250</a></div></div>
<div class="ttc" id="group__board_htm_ga6b74ebf7985914d2185d28b50539bcb6"><div class="ttname"><a href="group__board.htm#ga6b74ebf7985914d2185d28b50539bcb6">VBUSMON_IN</a></div><div class="ttdeci">#define VBUSMON_IN</div><div class="ttdoc">The GPIO input register for VBUSMON. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00370">dev0680.h:370</a></div></div>
<div class="ttc" id="group__iar_htm_ga54cb903718e9e698f95e6a19c98db412"><div class="ttname"><a href="group__iar.htm#ga54cb903718e9e698f95e6a19c98db412">ALIGNMENT</a></div><div class="ttdeci">#define ALIGNMENT(X)</div><div class="ttdoc">Provide a portable way to align data. </div><div class="ttdef"><b>Definition:</b> <a href="iar_8h_source.htm#l00302">iar.h:302</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00358">em_usb.h:358</a></div></div>
<div class="ttc" id="group__board_htm_ga67d14a8254f229f60e005c595bdde793"><div class="ttname"><a href="group__board.htm#ga67d14a8254f229f60e005c595bdde793">VBUSMON_SETCFG</a></div><div class="ttdeci">#define VBUSMON_SETCFG()</div><div class="ttdoc">The GPIO configuration needed for VBUSMON. The configuration needs to be a simple input that will mon...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00376">dev0680.h:376</a></div></div>
<div class="ttc" id="group__board_htm_gaf9998c8b423b704f44d640f0c0f95c33"><div class="ttname"><a href="group__board.htm#gaf9998c8b423b704f44d640f0c0f95c33">ENUMCTRL_CLR</a></div><div class="ttdeci">#define ENUMCTRL_CLR()</div><div class="ttdoc">When the GPIO used for enumeration is configured as push-pull, this macro makes it easy to clear the ...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00335">dev0680.h:335</a></div></div>
<div class="ttc" id="em__usbtypes_8h_htm"><div class="ttname"><a href="em__usbtypes_8h.htm">em_usbtypes.h</a></div><div class="ttdoc">USB protocol stack library, internal type definitions. </div></div>
<div class="ttc" id="group__board_htm_ga647bc93bcc6d8107a4aaccd0da9aa59f"><div class="ttname"><a href="group__board.htm#ga647bc93bcc6d8107a4aaccd0da9aa59f">USB_REMOTEWKUPEN_STATE</a></div><div class="ttdeci">#define USB_REMOTEWKUPEN_STATE</div><div class="ttdoc">USB Remote Wakeup Enable. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00275">dev0680.h:275</a></div></div>
<div class="ttc" id="group__platform__common_htm_gad7795912037ecd3781859d0895f051a8"><div class="ttname"><a href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a></div><div class="ttdeci">#define MEMSET(d, v, l)</div><div class="ttdoc">Friendly convenience macro pointing to the C Stdlib functions. </div><div class="ttdef"><b>Definition:</b> <a href="platform-common_8h_source.htm#l00177">platform-common.h:177</a></div></div>
<div class="ttc" id="group__platform__common_htm_ga070d2ce7b6bb7e5c05602aa8c308d0c4"><div class="ttname"><a href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a></div><div class="ttdeci">#define NULL</div><div class="ttdoc">The null pointer. </div><div class="ttdef"><b>Definition:</b> <a href="platform-common_8h_source.htm#l00211">platform-common.h:211</a></div></div>
<div class="ttc" id="group__board_htm_ga082f47ed895858746a735168bb0622da"><div class="ttname"><a href="group__board.htm#ga082f47ed895858746a735168bb0622da">VBUSMON_INT_EN_BIT</a></div><div class="ttdeci">#define VBUSMON_INT_EN_BIT</div><div class="ttdoc">The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00405">dev0680.h:405</a></div></div>
<div class="ttc" id="group__micro_htm_ga3828884cc072db5a38d32e46303bd9a9"><div class="ttname"><a href="group__micro.htm#ga3828884cc072db5a38d32e46303bd9a9">halResume</a></div><div class="ttdeci">void halResume(void)</div><div class="ttdoc">Resumes microcontroller peripherals and board peripherals. </div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga889b575b566a663621c33eebf46272c1"><div class="ttname"><a href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a></div><div class="ttdeci">USB_Status_TypeDef</div><div class="ttdoc">USB transfer status enumerator. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00322">em_usb.h:322</a></div></div>
<div class="ttc" id="group__board_htm_ga56afc19439641d9c87f395b9fc113e7c"><div class="ttname"><a href="group__board.htm#ga56afc19439641d9c87f395b9fc113e7c">VBUSMON_SEL</a></div><div class="ttdeci">#define VBUSMON_SEL()</div><div class="ttdoc">Point the proper IRQ at the desired pin for VBUSMON. Remember that other pieces that might want to us...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00386">dev0680.h:386</a></div></div>
<div class="ttc" id="group__board_htm_ga66f4f5005a181e92aa001bc44dfa073a"><div class="ttname"><a href="group__board.htm#ga66f4f5005a181e92aa001bc44dfa073a">VBUSMON</a></div><div class="ttdeci">#define VBUSMON</div><div class="ttdoc">The actual GPIO VBUSMON is connected to. Remember that other pieces might want to use PA3...</div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00365">dev0680.h:365</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 6.1.0.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
