<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 6.1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div><!-- Generated by Doxygen 1.8.11 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('em__usbd_8c_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">em_usbd.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="em__usbd_8c.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**************************************************************************/</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include PLATFORM_HEADER</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ember_8h.htm">stack/include/ember.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hal_8h.htm">hal/hal.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#if CORTEXM3_EM35X_USB</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usb_8h.htm">em_usb.h</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbhal_8h.htm">em_usbhal.h</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbtypes_8h.htm">em_usbtypes.h</a>&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="em__usbd_8h.htm">em_usbd.h</a>&quot;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;serial/serial.h&quot;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">static</span> USBD_Device_TypeDef device;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;USBD_Device_TypeDef *dev = &amp;device;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *stateNames[] =</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>] = <span class="stringliteral">&quot;NONE      &quot;</span>,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da01e32e620c7692ea767d99bb4120940b">USBD_STATE_ATTACHED</a>] = <span class="stringliteral">&quot;ATTACHED  &quot;</span>,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da47b9228ad86b300416ed28d2c2b7e5d3">USBD_STATE_POWERED</a>] = <span class="stringliteral">&quot;POWERED   &quot;</span>,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048">USBD_STATE_DEFAULT</a>] = <span class="stringliteral">&quot;DEFAULT   &quot;</span>,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>] = <span class="stringliteral">&quot;CONFIGURED&quot;</span>,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>] = <span class="stringliteral">&quot;SUSPENDED &quot;</span>,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  [<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a>] = <span class="stringliteral">&quot;UNDEFINED &quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;};</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga325117af9b3a9ad1df068cf3b19dc1ba">   53</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__USB__DEVICE.htm#ga325117af9b3a9ad1df068cf3b19dc1ba">USBD_AbortAllTransfers</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  ATOMIC(</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    USBDHAL_AbortAllTransfers(<a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1aaf5744aa348775f860ff2ff535c67ee7">USB_STATUS_EP_ABORTED</a>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    )</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga83f32dfa4f6a5d010e413967850c52b2">   67</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga83f32dfa4f6a5d010e413967850c52b2">USBD_AbortTransfer</a>(<span class="keywordtype">int</span> epAddr)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a> callback;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="comment">// nUSBD_AbortTransfer(), Illegal request</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">// nUSBD_AbortTransfer(), Illegal endpoint</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep-&gt;num != 0);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  DECLARE_INTERRUPT_STATE;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  DISABLE_INTERRUPTS();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;state == D_EP_IDLE ) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="comment">// USBD_AbortEp( ep );</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  ep-&gt;state = D_EP_IDLE;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordflow">if</span> ((ep-&gt;xferCompleteCb) != 0U) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    callback = ep-&gt;xferCompleteCb;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    ep-&gt;xferCompleteCb = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span> ((dev-&gt;lastState == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        &amp;&amp; (dev-&gt;state     == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a>)) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      USBDHAL_DeactivateEp(ep);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// DEBUG_TRACE_ABORT( USB_STATUS_EP_ABORTED );</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    callback(<a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1aaf5744aa348775f860ff2ff535c67ee7">USB_STATUS_EP_ABORTED</a>, ep-&gt;xferred, ep-&gt;remaining);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  RESTORE_INTERRUPTS();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga71b9264662d74666e4b058984e3346e5">  115</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__USB__DEVICE.htm#ga71b9264662d74666e4b058984e3346e5">USBD_Connect</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  ATOMIC(</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    USBDHAL_Connect();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    )</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">  130</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">USBD_Disconnect</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  ATOMIC(</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    USBDHAL_Disconnect();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    )</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keywordtype">void</span> USBD_SetUsbState(<a class="code" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> newState)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <a class="code" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> currentState;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  currentState = dev-&gt;state;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">if</span> ( newState == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a> ) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    dev-&gt;savedState = currentState;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  dev-&gt;lastState = dev-&gt;state;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  dev-&gt;state = newState;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">if</span> ((dev-&gt;callbacks-&gt;usbStateChange)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      &amp;&amp; (currentState != newState)) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    dev-&gt;callbacks-&gt;usbStateChange(currentState, newState);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">  165</a></span>&#160;<a class="code" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> <a class="code" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">USBD_GetUsbState</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordflow">return</span> dev-&gt;state;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga1796a832b3ff75580451818ae2e64000">  180</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="group__USB__DEVICE.htm#ga1796a832b3ff75580451818ae2e64000">USBD_GetUsbStateName</a>(<a class="code" href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a> state)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">if</span> ( state &gt; <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a> ) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    state = <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordflow">return</span> stateNames[state];</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">  199</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a>(<span class="keywordtype">int</span> epAddr)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="comment">// USBD_EpIsBusy(), Illegal endpoint</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;state == D_EP_IDLE ) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga9bf435e62169bfb3ee0a43ef0e9d009d">  224</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga9bf435e62169bfb3ee0a43ef0e9d009d">USBD_StallEp</a>(<span class="keywordtype">int</span> epAddr)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a> retVal;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_STALL</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;Stalling EP%d&quot;</span>, ep-&gt;num);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keywordflow">if</span> (ep-&gt;in) {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;in\r\n&quot;</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;out\r\n&quot;</span>);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="comment">// USBD_StallEp(), Illegal request</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="comment">// USBD_StallEp(), Illegal endpoint</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="comment">// assert (ep-&gt;num!=0);</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  ATOMIC(</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    retVal = USBDHAL_StallEp(ep);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    )</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">if</span> ( retVal != <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> ) {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    retVal = <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">return</span> retVal;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#gacb0ed1c21fd4aecfe96060ea87a617a8">  266</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#gacb0ed1c21fd4aecfe96060ea87a617a8">USBD_UnStallEp</a>(<span class="keywordtype">int</span> epAddr)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a> retVal;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_STALL</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;Unstalling EP%d&quot;</span>, ep-&gt;num);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">if</span> (ep-&gt;in) {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;in\r\n&quot;</span>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;out\r\n&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="comment">// USBD_StallEp(), Illegal request</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="comment">// USBD_StallEp(), Illegal endpoint</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">// assert (ep-&gt;num!=0);</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  ATOMIC(</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    retVal = USBDHAL_UnStallEp(ep);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    )</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordflow">if</span> ( retVal != <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> ) {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    retVal = <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keywordflow">return</span> retVal;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#gae26fedf61e90eb1e50ae5d24cd65d0b8">  305</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__USB__DEVICE.htm#gae26fedf61e90eb1e50ae5d24cd65d0b8">USBD_Stop</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <a class="code" href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">USBD_Disconnect</a>();</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  USBHAL_DisableGlobalInt();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  USBD_SetUsbState(<a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga0e5f5bd847e7cc1c4c384bb6b7f0ce77">  328</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga0e5f5bd847e7cc1c4c384bb6b7f0ce77">USBD_Init</a>(<span class="keyword">const</span> <a class="code" href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a> *p)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordtype">int</span> numEps;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  USBD_Ep_TypeDef *ep;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  uint8_t txFifoNum;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  uint8_t *conf, *confEnd;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm">USB_EndpointDescriptor_TypeDef</a> *epd;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  uint32_t totalRxFifoSize, totalTxFifoSize, numInEps, numOutEps;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="group__USB__COMMON.htm#ga21c87b800d87fd731173dd4f48f23c28">USBTIMER_Init</a>();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <a class="code" href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a>(dev, 0, <span class="keyword">sizeof</span>(USBD_Device_TypeDef));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  dev-&gt;setup                = dev-&gt;setupPkt;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  dev-&gt;deviceDescriptor     = p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#a9b34de34ccc1726c268b646419f5a1b4">deviceDescriptor</a>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  dev-&gt;configDescriptor     = (<a class="code" href="structUSB__ConfigurationDescriptor__TypeDef.htm">USB_ConfigurationDescriptor_TypeDef</a>*)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                              p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#a0a79a532500f7d8618fdcf491a5a7b13">configDescriptor</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  dev-&gt;stringDescriptors    = p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#add4d80f6bf26ff2fe67485ec12284a4c">stringDescriptors</a>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  dev-&gt;numberOfStrings      = p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#a7dffaf3d3163e86be4304269d89047a1">numberOfStrings</a>;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  dev-&gt;state                = <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  dev-&gt;savedState           = <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  dev-&gt;lastState            = <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a>;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  dev-&gt;callbacks            = p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#ab7362b4c08a63e16e79e5dab224331c8">callbacks</a>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  #<span class="keywordflow">if</span> <a class="code" href="group__board.htm#ga647bc93bcc6d8107a4aaccd0da9aa59f">USB_REMOTEWKUPEN_STATE</a></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  dev-&gt;remoteWakeupEnabled  = <span class="keyword">true</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  #<span class="keywordflow">else</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  dev-&gt;remoteWakeupEnabled  = <span class="keyword">false</span>;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  #endif</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="comment">/* Initialize EP0 */</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  ep                 = &amp;dev-&gt;ep[0];</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  ep-&gt;in             = <span class="keyword">false</span>;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  ep-&gt;buf            = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  ep-&gt;num            = 0;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  ep-&gt;mask           = 1;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  ep-&gt;addr           = 0;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  ep-&gt;type           = <a class="code" href="group__USB__COMMON.htm#ga95b74d966c16ae5fec01e0d6cd26fdac">USB_EPTYPE_CTRL</a>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  ep-&gt;txFifoNum      = 0;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  ep-&gt;packetSize     = <a class="code" href="group__USB__COMMON.htm#gadf89a62ea2fad945456130a90ebfcc91">USB_EP0_SIZE</a>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  ep-&gt;remaining      = 0;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  ep-&gt;xferred        = 0;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  ep-&gt;state          = D_EP_IDLE;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  ep-&gt;xferCompleteCb = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  ep-&gt;fifoSize       = <a class="code" href="group__USB__COMMON.htm#gadf89a62ea2fad945456130a90ebfcc91">USB_EP0_SIZE</a> / 4;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  totalTxFifoSize = ep-&gt;fifoSize * p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#adac2ad6ec2b476697054bf4d442d2e61">bufferingMultiplier</a>[0];</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  totalRxFifoSize = (ep-&gt;fifoSize + 1) * p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#adac2ad6ec2b476697054bf4d442d2e61">bufferingMultiplier</a>[0];</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="comment">/* Parse configuration decriptor */</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  numEps = 0;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  numInEps  = 0;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  numOutEps = 0;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  conf = (uint8_t*)dev-&gt;configDescriptor;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  confEnd = conf + dev-&gt;configDescriptor-&gt;wTotalLength;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  txFifoNum = 1;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  #ifdef USB_DEBUG</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="comment">// DEBUG_BUFFER += sprintf(DEBUG_BUFFER,&quot;ep--&gt;\tin\ttype\tpacketSize\r\n&quot;);</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  #endif</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  while ( conf &lt; confEnd ) {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// USBD_Init(), Illegal configuration descriptor</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(*conf);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">if</span> ( *(conf + 1) == <a class="code" href="group__USB__COMMON.htm#ga01c697098d067b7a297bdaf2e3e2a8a5">USB_ENDPOINT_DESCRIPTOR</a> ) {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;      numEps++;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;      epd = (<a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm">USB_EndpointDescriptor_TypeDef</a>*)conf;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      ep                 = &amp;dev-&gt;ep[numEps];</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;      ep-&gt;in             = (epd-&gt;<a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm#a75d10250f7655c93e0425bbeff65b595">bEndpointAddress</a> &amp; <a class="code" href="group__USB__COMMON.htm#gaacee2775597edddc9d4ba5dee2024395">USB_SETUP_DIR_MASK</a>) != 0;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      ep-&gt;buf            = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;      ep-&gt;addr           = epd-&gt;<a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm#a75d10250f7655c93e0425bbeff65b595">bEndpointAddress</a>;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      ep-&gt;num            = ep-&gt;addr &amp; <a class="code" href="group__USB__COMMON.htm#ga06cd3bc995e8bf1d1b4d6958323c98d8">USB_EPNUM_MASK</a>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      ep-&gt;mask           = 1 &lt;&lt; ep-&gt;num;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      ep-&gt;type           = epd-&gt;<a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm#acd16c673693929a051c5996527c5782a">bmAttributes</a> &amp; <a class="code" href="group__USB__COMMON.htm#ga37edda82028e35831f6b321d57eb6c6c">CONFIG_DESC_BM_TRANSFERTYPE</a>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      ep-&gt;packetSize     = epd-&gt;<a class="code" href="structUSB__EndpointDescriptor__TypeDef.htm#acbc03e1419bc9b2bc449e8ffff75aac4">wMaxPacketSize</a>;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;      ep-&gt;remaining      = 0;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      ep-&gt;xferred        = 0;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      ep-&gt;state          = D_EP_IDLE;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;      ep-&gt;xferCompleteCb = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      <span class="keywordflow">if</span> ( ep-&gt;in ) {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        numInEps++;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        ep-&gt;txFifoNum = txFifoNum++;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        ep-&gt;fifoSize = (ep-&gt;packetSize / 4) * p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#adac2ad6ec2b476697054bf4d442d2e61">bufferingMultiplier</a>[numEps];</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        dev-&gt;inEpAddr2EpIndex[ep-&gt;num] = numEps;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        totalTxFifoSize += ep-&gt;fifoSize;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="comment">// USBD_Init(), Illegal IN EP address</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep-&gt;num &lt; MAX_NUM_IN_EPS);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        numOutEps++;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        ep-&gt;fifoSize = (ep-&gt;packetSize / 4 + 1) * p-&gt;<a class="code" href="structUSBD__Init__TypeDef.htm#adac2ad6ec2b476697054bf4d442d2e61">bufferingMultiplier</a>[numEps];</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        dev-&gt;outEpAddr2EpIndex[ep-&gt;num] = numEps;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        totalRxFifoSize += ep-&gt;fifoSize;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="comment">// USBD_Init(), Illegal OUT EP address</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep-&gt;num &lt; MAX_NUM_OUT_EPS);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    conf += *conf;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="comment">/* Rx-FIFO size: SETUP packets : 4*n + 6    n=#CTRL EP&#39;s</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">   *               GOTNAK        : 1</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">   *               Status info   : 2*n        n=#OUT EP&#39;s (EP0 included) in HW</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">   */</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  totalRxFifoSize += 10 + 1 + (2 * (MAX_NUM_OUT_EPS + 1));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  <span class="comment">// USBD_Init(), Illegal EP count</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(numEps == NUM_EP_USED);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  <span class="comment">// USBD_Init(), Illegal IN EP count</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(numInEps &lt; MAX_NUM_IN_EPS);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <span class="comment">// USBD_Init(), Illegal OUT EP count</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(numOutEps &lt; MAX_NUM_OUT_EPS);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  DECLARE_INTERRUPT_STATE;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  DISABLE_INTERRUPTS();</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  USBHAL_DisableGlobalInt();</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <span class="keywordflow">if</span> ( USBDHAL_CoreInit(1, 1) == <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a> ) {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    USBDHAL_EnableUsbResetInt();</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    USBHAL_EnableGlobalInt();</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="comment">// NVIC_ClearPendingIRQ( USB_IRQn );</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// NVIC_EnableIRQ( USB_IRQn );</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="comment">//   USBD_Init(), FIFO setup error</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(0);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a>;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  <span class="comment">/* Enable EPs */</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  uint8_t i;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordflow">for</span> (i = 1; i &lt;= numEps; i++) {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">// DEBUG_BUFFER += sprintf(DEBUG_BUFFER,&quot;EP%d\t%d\t%d\t%d\r\n&quot;,i,ep-&gt;in,ep-&gt;type,ep-&gt;packetSize);</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    ep = &amp;dev-&gt;ep[i];</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">if</span> (ep-&gt;in) {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;      USB-&gt;ENABLEIN  |= USB_ENABLEIN_ENABLEINEP0 &lt;&lt; ep-&gt;num;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;      EVENT_USB-&gt;CFG |= EVENT_USB_CFG_TXACTIVEEP0 &lt;&lt; ep-&gt;num;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;      USB-&gt;ENABLEOUT |= USB_ENABLEOUT_ENABLEOUTEP0 &lt;&lt; ep-&gt;num;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;      EVENT_USB-&gt;CFG |= EVENT_USB_CFG_RXVALIDEP0 &lt;&lt; ep-&gt;num;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <span class="comment">/* Connect USB */</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  USBDHAL_Connect();</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;  RESTORE_INTERRUPTS();</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;}</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00509"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">  509</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">USBD_Write</a>(<span class="keywordtype">int</span> epAddr, <span class="keywordtype">void</span> *data, <span class="keywordtype">int</span> byteCount,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;               <a class="code" href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a> callback)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_WRITE</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Write:%d\r\n&quot;</span>, byteCount);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  <span class="keywordflow">if</span> ( ep == <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ) {</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_WRITE</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Write(), Illegal endpoint\r\n&quot;</span>);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// USBD_Write(), Illegal endpoint</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(0);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a>;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;  <span class="comment">// USBD_Write(), Illegal transfer size</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  <span class="comment">// assert ((byteCount &lt; MAX_XFER_LEN) &amp;&amp; ((byteCount / ep-&gt;packetSize) &lt; MAX_PACKETS_PR_XFER));</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  <span class="comment">// USBD_Write(), Misaligned data buffer</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;  <span class="keywordflow">if</span> (data != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(!((uint32_t)(uint8_t *)data &amp; 3));</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  DECLARE_INTERRUPT_STATE;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  DISABLE_INTERRUPTS();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <span class="keywordflow">if</span> ( USBDHAL_EpIsStalled(ep)) {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// INT_Enable();</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">// USBD_Write(), Endpoint is halted</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_WRITE</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Write(), Endpoint is halted\r\n&quot;</span>);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a48b7d77349a7cad390753b58e02adf56">USB_STATUS_EP_STALLED</a>;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;state != D_EP_IDLE ) {</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_WRITE</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Write(), Endpoint is busy\r\n&quot;</span>);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;ep-&gt;state = %d\r\n&quot;</span>, ep-&gt;state);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1afa326e98a111316089803b32218fa176">USB_STATUS_EP_BUSY</a>;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  }</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <span class="keywordflow">if</span> ((ep-&gt;num &gt; 0) &amp;&amp; (<a class="code" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">USBD_GetUsbState</a>() != <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>)) {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_WRITE</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Write(), Device not configured\r\n&quot;</span>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7e1a5aed008099af75161c3a45de3e58">USB_STATUS_DEVICE_UNCONFIGURED</a>;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  }</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  <span class="comment">//if data is null, this is a zero length packet</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  <span class="keywordflow">if</span> (data == <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) {</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    ep-&gt;buf = <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    ep-&gt;buf = (uint8_t*)data;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  ep-&gt;remaining = byteCount;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  ep-&gt;xferred   = 0;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;num == 0 ) {</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    ep-&gt;in = <span class="keyword">true</span>;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  }</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  <span class="comment">// USBD_Write(), Illegal EP direction</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep-&gt;in == <span class="keyword">true</span>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  ep-&gt;state          = D_EP_TRANSMITTING;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  ep-&gt;xferCompleteCb = callback;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  <span class="comment">// kickoff USB transfer</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  USBD_ArmEp(ep);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  RESTORE_INTERRUPTS();</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga9e0a1cf705301d9e035feff27ea41cda">  618</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga9e0a1cf705301d9e035feff27ea41cda">USBD_Read</a>(<span class="keywordtype">int</span> epAddr, <span class="keywordtype">void</span> *data, <span class="keywordtype">int</span> byteCount,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;              <a class="code" href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a> callback)</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;{</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_READ</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Read:%X - %d\r\nep-&gt;in=%d\r\n&quot;</span>, epAddr, ep-&gt;num, ep-&gt;in);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;  <span class="comment">// assert ((byteCount &lt; MAX_XFER_LEN) &amp;&amp; ((byteCount/ep-&gt;packetSize) &lt; MAX_PACKETS_PR_XFER));</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  <span class="keywordflow">if</span> (data != <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(!((uint32_t)(uint8_t *)data &amp; 3));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  DECLARE_INTERRUPT_STATE;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  DISABLE_INTERRUPTS();</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <span class="keywordflow">if</span> ( USBDHAL_EpIsStalled(ep)) {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_READ</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Read(), Endpoint is halted\r\n&quot;</span>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a48b7d77349a7cad390753b58e02adf56">USB_STATUS_EP_STALLED</a>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  }</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="comment">// Assert above prevents dereferencing null pointer</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;state == D_EP_TRANSMITTING ) {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_READ</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;USBD_Read(), Endpoint is busy\r\n&quot;</span>);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1afa326e98a111316089803b32218fa176">USB_STATUS_EP_BUSY</a>;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  <span class="keywordflow">if</span> ((ep-&gt;num &gt; 0) &amp;&amp; (<a class="code" href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">USBD_GetUsbState</a>() != <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a>)) {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    RESTORE_INTERRUPTS();</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_READ</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;\nUSBD_Read(), Device not configured&quot;</span>);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7e1a5aed008099af75161c3a45de3e58">USB_STATUS_DEVICE_UNCONFIGURED</a>;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;  }</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  ep-&gt;buf       = (uint8_t*)data;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  ep-&gt;remaining = byteCount;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  ep-&gt;xferred   = 0;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  <span class="keywordflow">if</span> ( ep-&gt;num == 0 ) {</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    ep-&gt;in = <span class="keyword">false</span>;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  }</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;  <span class="comment">// USBD_Read(), Illegal EP direction</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  <a class="code" href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(ep-&gt;in == <span class="keyword">false</span>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  ep-&gt;state          = D_EP_RECEIVING;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  ep-&gt;xferCompleteCb = callback;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;  <span class="comment">// kickoff USB transfer</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;  USBD_ArmEp(ep);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  RESTORE_INTERRUPTS();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00692"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga0e896f37e57c345c199d6e955b946c15">  692</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__USB__DEVICE.htm#ga0e896f37e57c345c199d6e955b946c15">usbSuspendDsr</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;{</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  <span class="keywordflow">if</span> (dev-&gt;state == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>) {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="preprocessor">    #ifndef EMBER_NO_STACK</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="group__child.htm#ga69bcb9675634542087715b23bb171536">emberStackPowerDown</a>();</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="preprocessor">    #endif // EMBER_NO_STACK</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="comment">// halPowerDown();</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    halSuspendCallback();</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">//Turn idle sleep into USB sleep which divides down all the chip clocks,</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="comment">//by 4, except system timer.</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    CMLV-&gt;CPUCLKSEL |= CMLV_CPUCLKSEL_CPUCLKSELFIELD;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="group__micro.htm#ga6d05736655f1a012dc969d1d912e835b">halSleep</a>(<a class="code" href="group__micro.htm#ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506">SLEEPMODE_IDLE</a>);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;  }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment">/***************************************************************************/</span></div><div class="line"><a name="l00720"></a><span class="lineno"><a class="line" href="group__USB__DEVICE.htm#ga9fb12718f509c578656e4fc08bc40f69">  720</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="group__USB__DEVICE.htm#ga9fb12718f509c578656e4fc08bc40f69">USBD_RemoteWakeup</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;{</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_SUSPEND</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;RemoteWakeup...&quot;</span>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  <span class="keywordflow">if</span> ((dev-&gt;state != <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;      || (dev-&gt;remoteWakeupEnabled == <span class="keyword">false</span>)) {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="comment">// Not suspend or remote wakeup not enabled</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_SUSPEND</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;illegal\r\n&quot;</span>);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;  USBDHAL_SetRemoteWakeup();</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  uint16_t timeout = 4; <span class="comment">// Set for 4 ms. Host should take over within 1 ms</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;  <span class="comment">//store start time, compare difference with current time with timeout period</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  uint16_t startTime = <a class="code" href="group__system__timer.htm#gaa4ce0f9db9c950bd2272a9e743e77b2a">halCommonGetInt16uMillisecondTick</a>();</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  uint16_t curTime = <a class="code" href="group__system__timer.htm#gaa4ce0f9db9c950bd2272a9e743e77b2a">halCommonGetInt16uMillisecondTick</a>();</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  <span class="keywordflow">while</span> ((<a class="code" href="group__platform__common.htm#gab728801c3fb8c18040ae604170773f9e">elapsedTimeInt16u</a>(startTime, curTime) &lt;= timeout)</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;         &amp;&amp; (dev-&gt;state == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>)) { <span class="comment">//exit if USB resumes</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    curTime = <a class="code" href="group__system__timer.htm#gaa4ce0f9db9c950bd2272a9e743e77b2a">halCommonGetInt16uMillisecondTick</a>();</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  }</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;  <span class="keywordflow">if</span> (dev-&gt;state == <a class="code" href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a>) { <span class="comment">//record failure if USB fails to resume</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="preprocessor">    #ifdef USB_DEBUG_SUSPEND</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;timed out\r\n&quot;</span>);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a69c65b08dff316759c941351aa70a905">USB_STATUS_TIMEOUT</a>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  }</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="preprocessor">  #ifdef USB_DEBUG_SUSPEND</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, <span class="stringliteral">&quot;succeeded\r\n&quot;</span>);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="preprocessor">  #endif</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;}</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment">// DEBUG buffer with printout function, note buffer has no overflow protection</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="preprocessor">#ifdef USB_DEBUG</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keyword">static</span> <span class="keywordtype">char</span> debugbuffer[4000];</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="keywordtype">char</span> *DEBUG_BUFFER = debugbuffer;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="keywordtype">void</span> USBD_PrintDebug(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;{</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;  debugbuffer[3999] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;  emberSerialGuaranteedPrintf(SER232, debugbuffer);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;  <a class="code" href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a>(debugbuffer, 0, 4000);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;  DEBUG_BUFFER = debugbuffer;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="preprocessor">#if EM_SERIAL3_ENABLED</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment">// interface with serial/uart queues. Enables emberserialprintf</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;uint8_t dequeueTxIntoBuffer(uint8_t *data)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;  EmSerialFifoQueue *q = (EmSerialFifoQueue *)emSerialTxQueues[3];</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;  uint8_t txSize = 0;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <span class="comment">//If there are bytes in the Q and txSize hasn&#39;t maxed out, pull more</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;  <span class="comment">//bytes off the Q into the DMA buffer</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  <span class="keywordflow">while</span> ((q-&gt;used &gt; 0) &amp;&amp; (txSize &lt; EP5_SIZE)) {</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    *data = <a class="code" href="group__serial.htm#gaa9ed21755e12d502f03e0fa08618618c">FIFO_DEQUEUE</a>(q, emSerialTxQueueWraps[3]);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    data++;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    txSize++;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  }</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  <span class="keywordflow">return</span> txSize;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;}</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment">// interface with serial/uart queues. Enables emberSerialPrintf.</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">// EP_IN must be defined. Assumes EP1 size, 8 bytes, which may be larger</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment">// depending on endpoint.</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="keywordtype">void</span> <a class="code" href="em__usb_8h.htm#ad49474dc47128a70257cebad8e99a5eb">usbTxData</a>()</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;{</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a>(CDC_EP_IN)) {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    uint8_t data[EP5_SIZE];</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    uint8_t txSize = dequeueTxIntoBuffer(data);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keywordflow">if</span> (txSize &gt; 0) {</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;      <a class="code" href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">USBD_Write</a>(CDC_EP_IN, data, txSize, <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;  }</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;}</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">// interface with serial/uart library. Enables emberSerialGuaranteedPrintf</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="keywordtype">void</span> <a class="code" href="em__usb_8h.htm#a13e133a619141c4be22d126832c963d6">usbForceTxData</a>(uint8_t *data, uint8_t length)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;  <span class="keywordflow">while</span> (<a class="code" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a>(CDC_EP_IN)) {</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;  }</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  <a class="code" href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">USBD_Write</a>(CDC_EP_IN, data, length, <a class="code" href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  <span class="keywordflow">while</span> (<a class="code" href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a>(CDC_EP_IN)) {</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;}</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="preprocessor">#endif //EM_SERIAL3_ENABLED</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment">/******** THE REST OF THE FILE IS DOCUMENTATION ONLY !**********************/</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="preprocessor">#endif //CORTEXM3_EM35X_USB</span></div><div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a69c65b08dff316759c941351aa70a905"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a69c65b08dff316759c941351aa70a905">USB_STATUS_TIMEOUT</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00336">em_usb.h:336</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga656c8d2935af97156bc0babdc43c32ee"><div class="ttname"><a href="group__USB__DEVICE.htm#ga656c8d2935af97156bc0babdc43c32ee">USBD_Write</a></div><div class="ttdeci">int USBD_Write(int epAddr, void *data, int byteCount, USB_XferCompleteCb_TypeDef callback)</div><div class="ttdoc">Start a write (IN) transfer on an endpoint. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00509">em_usbd.c:509</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da978c707d313eb49b70bc62dfae304048">USBD_STATE_DEFAULT</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00356">em_usb.h:356</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga06cd3bc995e8bf1d1b4d6958323c98d8"><div class="ttname"><a href="group__USB__COMMON.htm#ga06cd3bc995e8bf1d1b4d6958323c98d8">USB_EPNUM_MASK</a></div><div class="ttdeci">#define USB_EPNUM_MASK</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00164">em_usb.h:164</a></div></div>
<div class="ttc" id="em__usb_8h_htm_a13e133a619141c4be22d126832c963d6"><div class="ttname"><a href="em__usb_8h.htm#a13e133a619141c4be22d126832c963d6">usbForceTxData</a></div><div class="ttdeci">void usbForceTxData(uint8_t *data, uint8_t length)</div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da74e1d49afc6b25e202cc9e42f595f4ed">USBD_STATE_SUSPENDED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00359">em_usb.h:359</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7fc3604700f290c08102ab7a60dbeac2">USB_STATUS_OK</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00324">em_usb.h:324</a></div></div>
<div class="ttc" id="structUSB__EndpointDescriptor__TypeDef_htm_acbc03e1419bc9b2bc449e8ffff75aac4"><div class="ttname"><a href="structUSB__EndpointDescriptor__TypeDef.htm#acbc03e1419bc9b2bc449e8ffff75aac4">USB_EndpointDescriptor_TypeDef::wMaxPacketSize</a></div><div class="ttdeci">uint16_t wMaxPacketSize</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00489">em_usb.h:489</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_ab7362b4c08a63e16e79e5dab224331c8"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#ab7362b4c08a63e16e79e5dab224331c8">USBD_Init_TypeDef::callbacks</a></div><div class="ttdeci">USBD_Callbacks_TypeDef_Pointer callbacks</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00645">em_usb.h:645</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga2fa15407a4ef650bbd9f69dbddad6977"><div class="ttname"><a href="group__USB__COMMON.htm#ga2fa15407a4ef650bbd9f69dbddad6977">USB_XferCompleteCb_TypeDef</a></div><div class="ttdeci">int(* USB_XferCompleteCb_TypeDef)(USB_Status_TypeDef status, uint32_t xferred, uint32_t remaining)</div><div class="ttdoc">USB transfer callback function. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00526">em_usb.h:526</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1afa326e98a111316089803b32218fa176"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1afa326e98a111316089803b32218fa176">USB_STATUS_EP_BUSY</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00326">em_usb.h:326</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gae26fedf61e90eb1e50ae5d24cd65d0b8"><div class="ttname"><a href="group__USB__DEVICE.htm#gae26fedf61e90eb1e50ae5d24cd65d0b8">USBD_Stop</a></div><div class="ttdeci">void USBD_Stop(void)</div><div class="ttdoc">Stop USB device stack operation. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00305">em_usbd.c:305</a></div></div>
<div class="ttc" id="group__iar_htm_gacdcc5aaebf3f273c1762f24a6ece2e5e"><div class="ttname"><a href="group__iar.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a></div><div class="ttdeci">#define assert(condition)</div><div class="ttdoc">A custom implementation of the C language assert macro. This macro implements the conditional evaluat...</div><div class="ttdef"><b>Definition:</b> <a href="iar_8h_source.htm#l00174">iar.h:174</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga9fb12718f509c578656e4fc08bc40f69"><div class="ttname"><a href="group__USB__DEVICE.htm#ga9fb12718f509c578656e4fc08bc40f69">USBD_RemoteWakeup</a></div><div class="ttdeci">int USBD_RemoteWakeup(void)</div><div class="ttdoc">Perform a remote wakeup signalling sequence. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00720">em_usbd.c:720</a></div></div>
<div class="ttc" id="structUSB__EndpointDescriptor__TypeDef_htm_a75d10250f7655c93e0425bbeff65b595"><div class="ttname"><a href="structUSB__EndpointDescriptor__TypeDef.htm#a75d10250f7655c93e0425bbeff65b595">USB_EndpointDescriptor_TypeDef::bEndpointAddress</a></div><div class="ttdeci">uint8_t bEndpointAddress</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00487">em_usb.h:487</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_a7dffaf3d3163e86be4304269d89047a1"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#a7dffaf3d3163e86be4304269d89047a1">USBD_Init_TypeDef::numberOfStrings</a></div><div class="ttdeci">const uint8_t numberOfStrings</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00639">em_usb.h:639</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_adac2ad6ec2b476697054bf4d442d2e61"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#adac2ad6ec2b476697054bf4d442d2e61">USBD_Init_TypeDef::bufferingMultiplier</a></div><div class="ttdeci">const uint8_t * bufferingMultiplier</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00640">em_usb.h:640</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da8abe2fca377f950a2a9c95316f5246be">USBD_STATE_ADDRESSED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00357">em_usb.h:357</a></div></div>
<div class="ttc" id="hal_8h_htm"><div class="ttname"><a href="hal_8h.htm">hal.h</a></div><div class="ttdoc">Generic set of HAL includes for all platforms. </div></div>
<div class="ttc" id="group__micro_htm_ga6d05736655f1a012dc969d1d912e835b"><div class="ttname"><a href="group__micro.htm#ga6d05736655f1a012dc969d1d912e835b">halSleep</a></div><div class="ttdeci">void halSleep(SleepModes sleepMode)</div><div class="ttdoc">Puts the microcontroller to sleep in a specified mode. </div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga325117af9b3a9ad1df068cf3b19dc1ba"><div class="ttname"><a href="group__USB__DEVICE.htm#ga325117af9b3a9ad1df068cf3b19dc1ba">USBD_AbortAllTransfers</a></div><div class="ttdeci">void USBD_AbortAllTransfers(void)</div><div class="ttdoc">Abort all pending transfers. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00053">em_usbd.c:53</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga37edda82028e35831f6b321d57eb6c6c"><div class="ttname"><a href="group__USB__COMMON.htm#ga37edda82028e35831f6b321d57eb6c6c">CONFIG_DESC_BM_TRANSFERTYPE</a></div><div class="ttdeci">#define CONFIG_DESC_BM_TRANSFERTYPE</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00171">em_usb.h:171</a></div></div>
<div class="ttc" id="ember_8h_htm"><div class="ttname"><a href="ember_8h.htm">ember.h</a></div><div class="ttdoc">The master include file for the EmberZNet API. </div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga0e5f5bd847e7cc1c4c384bb6b7f0ce77"><div class="ttname"><a href="group__USB__DEVICE.htm#ga0e5f5bd847e7cc1c4c384bb6b7f0ce77">USBD_Init</a></div><div class="ttdeci">int USBD_Init(const USBD_Init_TypeDef *p)</div><div class="ttdoc">Initializes USB device hardware and internal protocol stack data structures, then connects the data-l...</div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00328">em_usbd.c:328</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da35ca8b56bdc46ce0dd7c39400796ba7c">USBD_STATE_NONE</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00353">em_usb.h:353</a></div></div>
<div class="ttc" id="group__system__timer_htm_gaa4ce0f9db9c950bd2272a9e743e77b2a"><div class="ttname"><a href="group__system__timer.htm#gaa4ce0f9db9c950bd2272a9e743e77b2a">halCommonGetInt16uMillisecondTick</a></div><div class="ttdeci">uint16_t halCommonGetInt16uMillisecondTick(void)</div><div class="ttdoc">Returns the current system time in system ticks, as a 16-bit value. </div></div>
<div class="ttc" id="em__usb_8h_htm"><div class="ttname"><a href="em__usb_8h.htm">em_usb.h</a></div><div class="ttdoc">USB protocol stack library API for EFM32. </div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a7e1a5aed008099af75161c3a45de3e58"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a7e1a5aed008099af75161c3a45de3e58">USB_STATUS_DEVICE_UNCONFIGURED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00333">em_usb.h:333</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga95b74d966c16ae5fec01e0d6cd26fdac"><div class="ttname"><a href="group__USB__COMMON.htm#ga95b74d966c16ae5fec01e0d6cd26fdac">USB_EPTYPE_CTRL</a></div><div class="ttdeci">#define USB_EPTYPE_CTRL</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00158">em_usb.h:158</a></div></div>
<div class="ttc" id="em__usbhal_8h_htm"><div class="ttname"><a href="em__usbhal_8h.htm">em_usbhal.h</a></div><div class="ttdoc">USB protocol stack library, low level USB peripheral access. </div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga9bf435e62169bfb3ee0a43ef0e9d009d"><div class="ttname"><a href="group__USB__DEVICE.htm#ga9bf435e62169bfb3ee0a43ef0e9d009d">USBD_StallEp</a></div><div class="ttdeci">int USBD_StallEp(int epAddr)</div><div class="ttdoc">Set an endpoint in the stalled (halted) state. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00224">em_usbd.c:224</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm">USBD_Init_TypeDef</a></div><div class="ttdoc">USB Device stack initialization structure. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00635">em_usb.h:635</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a48b7d77349a7cad390753b58e02adf56"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a48b7d77349a7cad390753b58e02adf56">USB_STATUS_EP_STALLED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00329">em_usb.h:329</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga83f32dfa4f6a5d010e413967850c52b2"><div class="ttname"><a href="group__USB__DEVICE.htm#ga83f32dfa4f6a5d010e413967850c52b2">USBD_AbortTransfer</a></div><div class="ttdeci">int USBD_AbortTransfer(int epAddr)</div><div class="ttdoc">Abort a pending transfer on a specific endpoint. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00067">em_usbd.c:67</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga2d952f8cf9bde552cfd5559ae47e70fc"><div class="ttname"><a href="group__USB__DEVICE.htm#ga2d952f8cf9bde552cfd5559ae47e70fc">USBD_Disconnect</a></div><div class="ttdeci">void USBD_Disconnect(void)</div><div class="ttdoc">Stop USB device operation. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00130">em_usbd.c:130</a></div></div>
<div class="ttc" id="em__usb_8h_htm_ad49474dc47128a70257cebad8e99a5eb"><div class="ttname"><a href="em__usb_8h.htm#ad49474dc47128a70257cebad8e99a5eb">usbTxData</a></div><div class="ttdeci">void usbTxData(void)</div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gab4e55bb0aacaa90aab28a79e9b131b0f"><div class="ttname"><a href="group__USB__DEVICE.htm#gab4e55bb0aacaa90aab28a79e9b131b0f">USBD_GetUsbState</a></div><div class="ttdeci">USBD_State_TypeDef USBD_GetUsbState(void)</div><div class="ttdoc">Get current USB device state. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00165">em_usbd.c:165</a></div></div>
<div class="ttc" id="em__usbd_8h_htm"><div class="ttname"><a href="em__usbd_8h.htm">em_usbd.h</a></div><div class="ttdoc">USB protocol stack library API for EFM32. </div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6dad588a80fcef0bcb009e0822908b36d29">USBD_STATE_LASTMARKER</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00360">em_usb.h:360</a></div></div>
<div class="ttc" id="structUSB__EndpointDescriptor__TypeDef_htm_acd16c673693929a051c5996527c5782a"><div class="ttname"><a href="structUSB__EndpointDescriptor__TypeDef.htm#acd16c673693929a051c5996527c5782a">USB_EndpointDescriptor_TypeDef::bmAttributes</a></div><div class="ttdeci">uint8_t bmAttributes</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00488">em_usb.h:488</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gaacee2775597edddc9d4ba5dee2024395"><div class="ttname"><a href="group__USB__COMMON.htm#gaacee2775597edddc9d4ba5dee2024395">USB_SETUP_DIR_MASK</a></div><div class="ttdeci">#define USB_SETUP_DIR_MASK</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00081">em_usb.h:81</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga9e0a1cf705301d9e035feff27ea41cda"><div class="ttname"><a href="group__USB__DEVICE.htm#ga9e0a1cf705301d9e035feff27ea41cda">USBD_Read</a></div><div class="ttdeci">int USBD_Read(int epAddr, void *data, int byteCount, USB_XferCompleteCb_TypeDef callback)</div><div class="ttdoc">Start a read (OUT) transfer on an endpoint. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00618">em_usbd.c:618</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da44c1920b09ea1062ea4d7ac31a846509">USBD_STATE_CONFIGURED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00358">em_usb.h:358</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga437a2e7bf70740fc715ac9a5c7310a6d"><div class="ttname"><a href="group__USB__DEVICE.htm#ga437a2e7bf70740fc715ac9a5c7310a6d">USBD_State_TypeDef</a></div><div class="ttdeci">USBD_State_TypeDef</div><div class="ttdoc">USB device state enumerator. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00352">em_usb.h:352</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga0e896f37e57c345c199d6e955b946c15"><div class="ttname"><a href="group__USB__DEVICE.htm#ga0e896f37e57c345c199d6e955b946c15">usbSuspendDsr</a></div><div class="ttdeci">void usbSuspendDsr(void)</div><div class="ttdoc">USB suspend delayed service routine. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00692">em_usbd.c:692</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1aaf5744aa348775f860ff2ff535c67ee7"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1aaf5744aa348775f860ff2ff535c67ee7">USB_STATUS_EP_ABORTED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00330">em_usb.h:330</a></div></div>
<div class="ttc" id="structUSB__ConfigurationDescriptor__TypeDef_htm"><div class="ttname"><a href="structUSB__ConfigurationDescriptor__TypeDef.htm">USB_ConfigurationDescriptor_TypeDef</a></div><div class="ttdoc">USB Configuration Descriptor. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00418">em_usb.h:418</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga21c87b800d87fd731173dd4f48f23c28"><div class="ttname"><a href="group__USB__COMMON.htm#ga21c87b800d87fd731173dd4f48f23c28">USBTIMER_Init</a></div><div class="ttdeci">void USBTIMER_Init(void)</div></div>
<div class="ttc" id="em__usbtypes_8h_htm"><div class="ttname"><a href="em__usbtypes_8h.htm">em_usbtypes.h</a></div><div class="ttdoc">USB protocol stack library, internal type definitions. </div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga1796a832b3ff75580451818ae2e64000"><div class="ttname"><a href="group__USB__DEVICE.htm#ga1796a832b3ff75580451818ae2e64000">USBD_GetUsbStateName</a></div><div class="ttdeci">const char * USBD_GetUsbStateName(USBD_State_TypeDef state)</div><div class="ttdoc">Get a string naming a device USB state. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00180">em_usbd.c:180</a></div></div>
<div class="ttc" id="group__micro_htm_ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506"><div class="ttname"><a href="group__micro.htm#ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506">SLEEPMODE_IDLE</a></div><div class="ttdef"><b>Definition:</b> <a href="micro-common_8h_source.htm#l00104">micro-common.h:104</a></div></div>
<div class="ttc" id="group__board_htm_ga647bc93bcc6d8107a4aaccd0da9aa59f"><div class="ttname"><a href="group__board.htm#ga647bc93bcc6d8107a4aaccd0da9aa59f">USB_REMOTEWKUPEN_STATE</a></div><div class="ttdeci">#define USB_REMOTEWKUPEN_STATE</div><div class="ttdoc">USB Remote Wakeup Enable. </div><div class="ttdef"><b>Definition:</b> <a href="dev0680_8h_source.htm#l00275">dev0680.h:275</a></div></div>
<div class="ttc" id="group__child_htm_ga69bcb9675634542087715b23bb171536"><div class="ttname"><a href="group__child.htm#ga69bcb9675634542087715b23bb171536">emberStackPowerDown</a></div><div class="ttdeci">void emberStackPowerDown(void)</div><div class="ttdoc">Immediately turns the radio power completely off. </div></div>
<div class="ttc" id="group__platform__common_htm_gad7795912037ecd3781859d0895f051a8"><div class="ttname"><a href="group__platform__common.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a></div><div class="ttdeci">#define MEMSET(d, v, l)</div><div class="ttdoc">Friendly convenience macro pointing to the C Stdlib functions. </div><div class="ttdef"><b>Definition:</b> <a href="platform-common_8h_source.htm#l00177">platform-common.h:177</a></div></div>
<div class="ttc" id="group__platform__common_htm_ga070d2ce7b6bb7e5c05602aa8c308d0c4"><div class="ttname"><a href="group__platform__common.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a></div><div class="ttdeci">#define NULL</div><div class="ttdoc">The null pointer. </div><div class="ttdef"><b>Definition:</b> <a href="platform-common_8h_source.htm#l00211">platform-common.h:211</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gadf89a62ea2fad945456130a90ebfcc91"><div class="ttname"><a href="group__USB__COMMON.htm#gadf89a62ea2fad945456130a90ebfcc91">USB_EP0_SIZE</a></div><div class="ttdeci">#define USB_EP0_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00150">em_usb.h:150</a></div></div>
<div class="ttc" id="group__serial_htm_gaa9ed21755e12d502f03e0fa08618618c"><div class="ttname"><a href="group__serial.htm#gaa9ed21755e12d502f03e0fa08618618c">FIFO_DEQUEUE</a></div><div class="ttdeci">#define FIFO_DEQUEUE(queue, size)</div><div class="ttdoc">Macro that de-queues a byte of data from a FIFO queue. </div><div class="ttdef"><b>Definition:</b> <a href="serial_8h_source.htm#l00324">serial.h:324</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga9eb41fa7508126bea30d672b777e250f"><div class="ttname"><a href="group__USB__DEVICE.htm#ga9eb41fa7508126bea30d672b777e250f">USBD_EpIsBusy</a></div><div class="ttdeci">bool USBD_EpIsBusy(int epAddr)</div><div class="ttdoc">Check if an endpoint is busy doing a transfer. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00199">em_usbd.c:199</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_ga71b9264662d74666e4b058984e3346e5"><div class="ttname"><a href="group__USB__DEVICE.htm#ga71b9264662d74666e4b058984e3346e5">USBD_Connect</a></div><div class="ttdeci">void USBD_Connect(void)</div><div class="ttdoc">Start USB device operation. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00115">em_usbd.c:115</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da01e32e620c7692ea767d99bb4120940b"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da01e32e620c7692ea767d99bb4120940b">USBD_STATE_ATTACHED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00354">em_usb.h:354</a></div></div>
<div class="ttc" id="group__platform__common_htm_gab728801c3fb8c18040ae604170773f9e"><div class="ttname"><a href="group__platform__common.htm#gab728801c3fb8c18040ae604170773f9e">elapsedTimeInt16u</a></div><div class="ttdeci">#define elapsedTimeInt16u(oldTime, newTime)</div><div class="ttdoc">Returns the elapsed time between two 16 bit values. Result may not be valid if the time samples diffe...</div><div class="ttdef"><b>Definition:</b> <a href="platform-common_8h_source.htm#l00373">platform-common.h:373</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257"><div class="ttname"><a href="group__USB__COMMON.htm#gga889b575b566a663621c33eebf46272c1a1792144148bac0a51ebc387e74e85257">USB_STATUS_ILLEGAL</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00328">em_usb.h:328</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga01c697098d067b7a297bdaf2e3e2a8a5"><div class="ttname"><a href="group__USB__COMMON.htm#ga01c697098d067b7a297bdaf2e3e2a8a5">USB_ENDPOINT_DESCRIPTOR</a></div><div class="ttdeci">#define USB_ENDPOINT_DESCRIPTOR</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00129">em_usb.h:129</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_add4d80f6bf26ff2fe67485ec12284a4c"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#add4d80f6bf26ff2fe67485ec12284a4c">USBD_Init_TypeDef::stringDescriptors</a></div><div class="ttdeci">const void *const * stringDescriptors</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00638">em_usb.h:638</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_a0a79a532500f7d8618fdcf491a5a7b13"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#a0a79a532500f7d8618fdcf491a5a7b13">USBD_Init_TypeDef::configDescriptor</a></div><div class="ttdeci">const uint8_t * configDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00637">em_usb.h:637</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gga437a2e7bf70740fc715ac9a5c7310a6da47b9228ad86b300416ed28d2c2b7e5d3"><div class="ttname"><a href="group__USB__DEVICE.htm#gga437a2e7bf70740fc715ac9a5c7310a6da47b9228ad86b300416ed28d2c2b7e5d3">USBD_STATE_POWERED</a></div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00355">em_usb.h:355</a></div></div>
<div class="ttc" id="structUSBD__Init__TypeDef_htm_a9b34de34ccc1726c268b646419f5a1b4"><div class="ttname"><a href="structUSBD__Init__TypeDef.htm#a9b34de34ccc1726c268b646419f5a1b4">USBD_Init_TypeDef::deviceDescriptor</a></div><div class="ttdeci">const USB_DeviceDescriptor_TypeDef * deviceDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00636">em_usb.h:636</a></div></div>
<div class="ttc" id="group__USB__COMMON_htm_ga889b575b566a663621c33eebf46272c1"><div class="ttname"><a href="group__USB__COMMON.htm#ga889b575b566a663621c33eebf46272c1">USB_Status_TypeDef</a></div><div class="ttdeci">USB_Status_TypeDef</div><div class="ttdoc">USB transfer status enumerator. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00322">em_usb.h:322</a></div></div>
<div class="ttc" id="structUSB__EndpointDescriptor__TypeDef_htm"><div class="ttname"><a href="structUSB__EndpointDescriptor__TypeDef.htm">USB_EndpointDescriptor_TypeDef</a></div><div class="ttdoc">USB Endpoint Descriptor. </div><div class="ttdef"><b>Definition:</b> <a href="em__usb_8h_source.htm#l00484">em_usb.h:484</a></div></div>
<div class="ttc" id="group__USB__DEVICE_htm_gacb0ed1c21fd4aecfe96060ea87a617a8"><div class="ttname"><a href="group__USB__DEVICE.htm#gacb0ed1c21fd4aecfe96060ea87a617a8">USBD_UnStallEp</a></div><div class="ttdeci">int USBD_UnStallEp(int epAddr)</div><div class="ttdoc">Reset stall state on a stalled (halted) endpoint. </div><div class="ttdef"><b>Definition:</b> <a href="em__usbd_8c_source.htm#l00266">em_usbd.c:266</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 6.1.0.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
