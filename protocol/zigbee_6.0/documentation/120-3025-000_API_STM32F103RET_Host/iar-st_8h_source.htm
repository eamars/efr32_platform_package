<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the STM32F103RET Host platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the STM32F103RET Host platform
   &#160;<span id="projectnumber">EmberZNet 6.0.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div><!-- Generated by Doxygen 1.8.11 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('iar-st_8h_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">iar-st.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="iar-st_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __IAR_ST_H__</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define __IAR_ST_H__</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ICCARM__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">  #error Improper PLATFORM_HEADER</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if (__VER__ &lt; 6040002)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">  #error Only IAR EWARM versions greater than 6.40.2 are supported</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif // __VER__</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">//Pull in the registers, Library, and other critical/useful ST code.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;stm32f10x.h&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//The Cortex-M3 does not have zero-page memory</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#define XAP2B_PAGEZERO_ON</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#define XAP2B_PAGEZERO_OFF</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gaf29b166bf5fea7f0bbc07f7014a8c6b5">   57</a></span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">bool</span> <a class="code" href="group__stm32f103ret__iar__config.htm#gaf29b166bf5fea7f0bbc07f7014a8c6b5">boolean</a>; <span class="comment">/*To ease adoption of bool instead of boolean.*/</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">   58</a></span>&#160;<span class="keyword">typedef</span> uint8_t  <a class="code" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">   59</a></span>&#160;<span class="keyword">typedef</span> int8_t   <a class="code" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">int8s</a>;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">   60</a></span>&#160;<span class="keyword">typedef</span> uint16_t <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">   61</a></span>&#160;<span class="keyword">typedef</span> int16_t  <a class="code" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">int16s</a>;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">   62</a></span>&#160;<span class="keyword">typedef</span> uint32_t <a class="code" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a>;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">   63</a></span>&#160;<span class="keyword">typedef</span> int32_t  <a class="code" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">int32s</a>;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">   64</a></span>&#160;<span class="keyword">typedef</span> uint32_t <a class="code" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">PointerType</a>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6">halInternalResetWatchDog</a>(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4">   79</a></span>&#160;<span class="preprocessor">#define halResetWatchdog()  halInternalResetWatchDog()</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gac90cd47ca2b08382baa48d854d9acc38">   84</a></span>&#160;<span class="preprocessor">#define SIGNED_ENUM</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#define simulatedSerialTimePasses()</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gaf947e7d809d6ff89fe93f6367c20f4c6">   94</a></span>&#160;<span class="preprocessor">#define _HAL_USE_COMMON_DIVMOD_</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga5cd18da9b188103037c75e5ed623b136">   99</a></span>&#160;<span class="preprocessor">#define _HAL_USE_COMMON_PGM_</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga7e71cc0eb54b859562fb1463dcce4f6f">  112</a></span>&#160;<span class="preprocessor">#define BIGENDIAN_CPU  false</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gabeeaa7d8b7d869f7e45b793b43b0b737">  118</a></span>&#160;<span class="preprocessor">#define MAIN_FUNCTION_PARAMETERS void</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gab15d5c759bdf4d50157e73caff40ad6f">  119</a></span>&#160;<span class="preprocessor">#define MAIN_FUNCTION_ARGUMENTS</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#ifndef __SOURCEFILE__</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga2c59e137842a414e665008da08ce7f34">  128</a></span>&#160;<span class="preprocessor">  #define __SOURCEFILE__ __FILE__</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#undef assert</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#if !defined(SIMPLER_ASSERT_REBOOT) || defined(DOXYGEN_SHOULD_SKIP_THIS)</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#ga3a08dd8589c7ca238328322d0e00560f">halInternalAssertFailed</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * filename, <span class="keywordtype">int</span> linenumber);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">  144</a></span>&#160;<span class="preprocessor">  #define assert(condition)                              \</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">  do {                                                   \</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">    if (!(condition)) {                                  \</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">      halInternalAssertFailed(__SOURCEFILE__, __LINE__); \</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">    }                                                    \</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">  #define assert(condition) \</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">  do { if ( !(condition) ) { while (1) {} } } while (0)</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga19793103eca86def2c5b82c213096974">  158</a></span>&#160;<span class="preprocessor">#define simulatedTimePasses()</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gabf72385043d62eb5c6da466c3b5b326c">  163</a></span>&#160;<span class="preprocessor">#define simulatedTimePassesMs(x)</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">  168</a></span>&#160;<span class="preprocessor">#define simulatedSerialTimePasses()</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gaddf5ec070e9499d36b7f2009ce736076">  174</a></span>&#160;<span class="preprocessor">#define UNUSED</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga53725029dad92158fd517728760b304a">  179</a></span>&#160;<span class="preprocessor">#define NO_INIT(__symbol) \</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">  __no_init __symbol</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga2001996279c075ad58c4850d31e7b59f">  186</a></span>&#160;<span class="preprocessor">#define NO_STRIPPING  __root</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gad9ac3d6162a4c18e51a0852093eab9bd">  191</a></span>&#160;<span class="preprocessor">#define STRINGIZE(X) #X</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga54cb903718e9e698f95e6a19c98db412">  196</a></span>&#160;<span class="preprocessor">#define ALIGNMENT(X) \</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">  _Pragma(STRINGIZE(data_alignment =##X## ) )</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">//The concept of LITE atomic handling isn&#39;t implemented on this platform,</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">//so just redirect to the normal atomic handling.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">    #define ATOMIC_LITE(blah)             ATOMIC(blah)</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">    #define DECLARE_INTERRUPT_STATE_LITE  DECLARE_INTERRUPT_STATE</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">    #define DISABLE_INTERRUPTS_LITE()     DISABLE_INTERRUPTS()</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">    #define RESTORE_INTERRUPTS_LITE()     RESTORE_INTERRUPTS()</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">    #define DECLARE_INTERRUPT_STATE uint32_t _emIsrState</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">#endif  // DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">//The core Global Interrupt Manipulation Macros start here.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8">  234</a></span>&#160;<span class="preprocessor">#define DISABLE_INTERRUPTS()       \</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">  do {                             \</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">    _emIsrState = __get_PRIMASK(); \</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">    __set_PRIMASK(1);              \</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4">  247</a></span>&#160;<span class="preprocessor">#define RESTORE_INTERRUPTS()    \</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">  do {                          \</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">    __set_PRIMASK(_emIsrState); \</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga7710527473136ee906c491bb5e0761a1">  256</a></span>&#160;<span class="preprocessor">#define INTERRUPTS_ON() \</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">  do {                  \</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">    __set_PRIMASK(0);   \</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga600e3cb6d6691dd6e04ecafef528ce47">  265</a></span>&#160;<span class="preprocessor">#define INTERRUPTS_OFF() \</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">  do {                   \</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">    __set_PRIMASK(1);    \</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gae06b01c7d430e4e94819568ad1404f1d">  273</a></span>&#160;<span class="preprocessor">#define INTERRUPTS_ARE_OFF() (__get_PRIMASK() != 0)</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga0674197dbd97cc7b9457e76aa55da102">  279</a></span>&#160;<span class="preprocessor">#define INTERRUPTS_WERE_ON() (_emIsrState == 0)</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gadb86d22878544b15c38b727363ecb8b7">  285</a></span>&#160;<span class="preprocessor">#define ATOMIC(blah)         \</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">  {                          \</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">    DECLARE_INTERRUPT_STATE; \</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">    DISABLE_INTERRUPTS();    \</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">    { blah }                 \</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">    RESTORE_INTERRUPTS();    \</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">  }</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga445de09810ada0d167d34c8222f86a81">  300</a></span>&#160;<span class="preprocessor">#define HANDLE_PENDING_INTERRUPTS() \</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">  do {                              \</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">    if (INTERRUPTS_ARE_OFF()) {     \</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">      INTERRUPTS_ON();              \</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">      INTERRUPTS_OFF();             \</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">    }                               \</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">  } while (0)</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">//true and FLASE are defined in ST&#39;s HAL Library</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">#ifndef NULL</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">  323</a></span>&#160;<span class="preprocessor">#define NULL ((void *)0)</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="group__stm32f103ret__iar__config.htm#gac6e2cc702734ab195fc0bdfedcacd1d3">  337</a></span>&#160;<span class="preprocessor">#define PLATCOMMONOKTOINCLUDE</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor">  #include &quot;<a class="code" href="platform-common_8h.htm">hal/host/generic/compiler/platform-common.h</a>&quot;</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#undef PLATCOMMONOKTOINCLUDE</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">#endif // __IAR_ST_H__</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="ttc" id="group__stm32f103ret__iar__config_htm_ga40790a257990626db514387099889f37"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a></div><div class="ttdeci">uint16_t int16u</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00060">iar-st.h:60</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_ga29edc2328533c8dbc46be2d7b654c749"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a></div><div class="ttdeci">uint8_t int8u</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00058">iar-st.h:58</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_ga36cdc07bf51be91bc9d92735b6c6695f"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">int16s</a></div><div class="ttdeci">int16_t int16s</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00061">iar-st.h:61</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_gaebe77f625f69d309d618b3c7afcaee5e"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">PointerType</a></div><div class="ttdeci">uint32_t PointerType</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00064">iar-st.h:64</a></div></div>
<div class="ttc" id="platform-common_8h_htm"><div class="ttname"><a href="platform-common_8h.htm">platform-common.h</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_gae8b7a95dfed4e452d1416a9151be88c7"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">int32s</a></div><div class="ttdeci">int32_t int32s</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00063">iar-st.h:63</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_ga3a08dd8589c7ca238328322d0e00560f"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga3a08dd8589c7ca238328322d0e00560f">halInternalAssertFailed</a></div><div class="ttdeci">void halInternalAssertFailed(const char *filename, int linenumber)</div><div class="ttdoc">A prototype definition for use by the assert macro. </div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_ga05aebcd1ffd9d69bda7b936f0cbd64b5"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a></div><div class="ttdeci">uint32_t int32u</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00062">iar-st.h:62</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_gac2017492c2bef74dd69c73d0c3452222"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">int8s</a></div><div class="ttdeci">int8_t int8s</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00059">iar-st.h:59</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_gaf29b166bf5fea7f0bbc07f7014a8c6b5"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#gaf29b166bf5fea7f0bbc07f7014a8c6b5">boolean</a></div><div class="ttdeci">bool boolean</div><div class="ttdoc">A typedef to make the size of the variable explicitly known. </div><div class="ttdef"><b>Definition:</b> <a href="iar-st_8h_source.htm#l00057">iar-st.h:57</a></div></div>
<div class="ttc" id="group__stm32f103ret__iar__config_htm_ga8a39a028776dc2065aa3f02c2a1fd1d6"><div class="ttname"><a href="group__stm32f103ret__iar__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6">halInternalResetWatchDog</a></div><div class="ttdeci">void halInternalResetWatchDog(void)</div><div class="ttdoc">Internal function to reset the watchdog timer. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the STM32F103RET Host platform. EmberZNet 6.0.0.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
